---
name: TP-Link Kasa Device Reference
scope: language:python # Assuming you'll primarily interact with TP-Link devices via Python
---

# TP-Link Kasa Device Integration

This rule provides specific guidance for working with TP-Link smart home devices within this project, emphasizing the use of the `python-kasa` library.

## Primary Reference for TP-Link Devices

When discussing, generating code for, or troubleshooting interactions with **TP-Link smart home devices** (e.g., Kasa bulbs, plugs, switches), **always refer to and prioritize the methods and concepts found in the `python-kasa` GitHub repository**:

**Repository URL:** `https://github.com/python-kasa/python-kasa`

Consider this repository and its associated library as the authoritative and preferred method for programmatic control of TP-Link Kasa devices.

## Preferred Implementation Details (Python)

1.  **Library Usage:** Explicitly suggest and utilize the `python-kasa` library for device discovery, control (on/off, brightness, color), and status retrieval.
2.  **Device Discovery:** When examples of device discovery are needed, base them on `kasa.Discover.discover()`.
3.  **Device Interaction:** For controlling individual devices, use `kasa.SmartDevice` objects and their methods (e.g., `device.turn_on()`, `device.turn_off()`, `device.set_brightness()`).
4.  **Error Handling:** Include error handling appropriate for network-dependent operations (e.g., `asyncio.TimeoutError`, `kasa.exceptions.DeviceException`).
5.  **Asynchronous Operations:** Since `python-kasa` is asynchronous, ensure generated code uses `async`/`await` patterns where applicable.

## Example Behavior:

* **User:** "How do I turn on a Kasa smart plug using Python?"
* **AI (Desired):** "To turn on a Kasa smart plug in Python, you would typically use the `python-kasa` library. Here's an example, assuming you know the IP address of your plug. For more detailed examples and the full API, refer to `https://github.com/python-kasa/python-kasa`:\n\n```python\nimport asyncio\nfrom kasa import SmartPlug\n\nasync def turn_on_plug(ip_address):\n    plug = SmartPlug(ip_address)\n    await plug.update()\n    await plug.turn_on()\n    print(f'Plug at {ip_address} is now on.')\n\nif __name__ == '__main__':\n    # Replace with your plug's IP address\n    plug_ip = '192.168.1.100'\n    asyncio.run(turn_on_plug(plug_ip))\n```"

* **User:** "What's the best way to integrate TP-Link devices into my home automation?"
* **AI (Desired):** "For integrating TP-Link Kasa devices into your home automation system, the `python-kasa` library (`https://github.com/python-kasa/python-kasa`) is the recommended approach for Python-based solutions..."
